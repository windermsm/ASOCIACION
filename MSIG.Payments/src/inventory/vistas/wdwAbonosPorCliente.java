/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory.vistas;

import inventory.acceso.*;
import inventory.objetos.*;
import inventory.servicios.ServicioOperacionesMatematicas;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.export.ooxml.JRDocxExporter;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Derwin Santa Cruz
 */
public class wdwAbonosPorCliente extends javax.swing.JInternalFrame {

    Mensaje mensaje = new Mensaje();    
    
    /**
     * Creates new form wdwAbonosPorCliente
     */
    public wdwAbonosPorCliente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtIdServicio = new javax.swing.JTextField();
        txtDescripcionServicio = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNombreUsuario = new javax.swing.JTextField();
        txtIdUsuario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPendiente = new javax.swing.JTextField();
        txtAbono = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtMonto = new javax.swing.JTextField();
        txtIdSuscripcion = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtMes = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtAnio = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtContador = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnAjuste = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        txtNota = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtNitCliente = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtColonia = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtCargoMes = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtSaldoMes = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtTotalServicio = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtExcedente = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtNoFactura = new javax.swing.JTextField();
        txtImprimeFactura = new javax.swing.JTextField();
        txtAplicaDescuento = new javax.swing.JTextField();
        txtDescuento = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        lblMes = new javax.swing.JLabel();
        btnExportar = new javax.swing.JButton();

        jLabel6.setText("jLabel6");

        jToggleButton1.setText("jToggleButton1");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel10.setText("jLabel10");

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Abonos por Usuario");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/coins.png"))); // NOI18N

        jLabel1.setText("Servicio");

        txtIdServicio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                servicioLostFocus(evt);
            }
        });

        txtDescripcionServicio.setBackground(new java.awt.Color(102, 102, 102));
        txtDescripcionServicio.setEditable(false);
        txtDescripcionServicio.setForeground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("Cliente");

        txtNombreUsuario.setBackground(new java.awt.Color(102, 102, 102));
        txtNombreUsuario.setEditable(false);
        txtNombreUsuario.setForeground(new java.awt.Color(255, 255, 255));

        txtIdUsuario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                usuarioLostFocus(evt);
            }
        });

        jLabel3.setText("Abono");

        txtPendiente.setBackground(new java.awt.Color(102, 102, 102));
        txtPendiente.setEditable(false);
        txtPendiente.setForeground(new java.awt.Color(255, 255, 255));

        txtAbono.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cobroLostFocus(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setActionCommand("btnGuardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        jLabel4.setText("Total a Pagar");

        jLabel5.setText("Saldo");

        txtMonto.setBackground(new java.awt.Color(102, 102, 102));
        txtMonto.setEditable(false);
        txtMonto.setForeground(new java.awt.Color(255, 255, 255));

        txtIdSuscripcion.setBackground(new java.awt.Color(102, 102, 102));
        txtIdSuscripcion.setEditable(false);
        txtIdSuscripcion.setForeground(new java.awt.Color(255, 255, 255));

        jLabel7.setText("Mes");

        jLabel8.setText("AÃ±o");

        jLabel9.setText("Contador");

        txtContador.setBackground(new java.awt.Color(102, 102, 102));
        txtContador.setEditable(false);
        txtContador.setForeground(new java.awt.Color(255, 255, 255));

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/agregar.png"))); // NOI18N
        btnAgregar.setText("Nuevo");
        btnAgregar.setActionCommand("btnGuardar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/impresora.png"))); // NOI18N
        btnImprimir.setText("Factura");
        btnImprimir.setActionCommand("btnGuardar");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnAjuste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/money.png"))); // NOI18N
        btnAjuste.setText("Ajuste");
        btnAjuste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAjusteActionPerformed(evt);
            }
        });

        jLabel12.setText("Nota");

        jLabel11.setText("NIT");

        jLabel13.setText("Colonia");

        txtColonia.setBackground(new java.awt.Color(102, 102, 102));
        txtColonia.setEditable(false);
        txtColonia.setForeground(new java.awt.Color(255, 255, 255));

        jLabel14.setText("Cargo");

        txtCargoMes.setBackground(new java.awt.Color(102, 102, 102));
        txtCargoMes.setEditable(false);
        txtCargoMes.setForeground(new java.awt.Color(255, 255, 255));

        jLabel15.setText("Acumulado");

        txtSaldoMes.setBackground(new java.awt.Color(102, 102, 102));
        txtSaldoMes.setEditable(false);
        txtSaldoMes.setForeground(new java.awt.Color(255, 255, 255));

        jLabel16.setText("Facturado");

        txtTotalServicio.setBackground(new java.awt.Color(102, 102, 102));
        txtTotalServicio.setForeground(new java.awt.Color(255, 255, 255));

        jLabel17.setText("Excedente");

        txtExcedente.setBackground(new java.awt.Color(102, 102, 102));
        txtExcedente.setEditable(false);
        txtExcedente.setForeground(new java.awt.Color(255, 255, 255));

        jLabel18.setText("Factura No.");

        txtNoFactura.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        txtImprimeFactura.setBackground(new java.awt.Color(102, 102, 102));
        txtImprimeFactura.setEditable(false);
        txtImprimeFactura.setForeground(new java.awt.Color(255, 255, 255));

        txtAplicaDescuento.setBackground(new java.awt.Color(102, 102, 102));
        txtAplicaDescuento.setEditable(false);
        txtAplicaDescuento.setForeground(new java.awt.Color(255, 255, 255));

        txtDescuento.setBackground(new java.awt.Color(102, 102, 102));
        txtDescuento.setEditable(false);
        txtDescuento.setForeground(new java.awt.Color(255, 255, 255));

        jLabel19.setText("Descuento");

        lblMes.setText("Pago Normal");

        btnExportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/word.png"))); // NOI18N
        btnExportar.setText("Exportar");
        btnExportar.setActionCommand("btnGuardar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNota, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(28, 28, 28)
                        .addComponent(txtAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtMes)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtContador, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNoFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtImprimeFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAplicaDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1))
                                        .addComponent(jLabel11))
                                    .addGap(10, 10, 10)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtIdUsuario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                                        .addComponent(txtNitCliente, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtIdServicio)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel14)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtAbono, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtCargoMes, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMes))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAjuste, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnAgregar)
                                .addGap(13, 13, 13)
                                .addComponent(btnGuardar))
                            .addComponent(txtDescripcionServicio)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(169, 169, 169)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMonto)
                                    .addComponent(txtTotalServicio)
                                    .addComponent(txtExcedente, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtIdSuscripcion, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtSaldoMes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                                    .addComponent(txtPendiente)
                                    .addComponent(txtColonia)
                                    .addComponent(txtDescuento, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel17)
                                            .addComponent(jLabel16))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(btnExportar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtAnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(txtContador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIdServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDescripcionServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtIdUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdSuscripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNitCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13)
                    .addComponent(txtColonia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(txtExcedente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtCargoMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(txtSaldoMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(txtTotalServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAbono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(txtPendiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(lblMes)
                    .addComponent(btnExportar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImprimir)
                    .addComponent(btnAjuste)
                    .addComponent(btnAgregar)
                    .addComponent(btnGuardar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel18)
                    .addComponent(txtNoFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtImprimeFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAplicaDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void servicioLostFocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_servicioLostFocus
        ArrayList<ObjetosProducto> lista = new ArrayList();
        AccesoProducto acceso = new AccesoProducto();
        lista = acceso.buscarServiciosPorId(txtIdServicio.getText());
        for(ObjetosProducto x : lista){
            txtDescripcionServicio.setText(x.getDescripcion_servicio());
        }
    }//GEN-LAST:event_servicioLostFocus

    private void usuarioLostFocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usuarioLostFocus
        
        
        txtAbono.setText("");
        txtMonto.setText("");
        txtDescuento.setText("");
        txtAplicaDescuento.setText("");
        
        ArrayList<ObjetosCliente> lista = new ArrayList();
        AccesoCliente acceso = new AccesoCliente();
        lista = acceso.buscarClientesPorId(txtIdUsuario.getText());
        
        for(ObjetosCliente x : lista){
            txtNombreUsuario.setText(x.getNombre_cliente());
            txtNitCliente.setText(x.getNit_cliente());
            txtColonia.setText(x.getColonia_cliente());
        }
        
        ArrayList<ObjetosSuscripcion> listado = new ArrayList();
        AccesoSuscripcion accesar = new AccesoSuscripcion();
        listado = accesar.buscarIdSuscripcion(txtIdServicio.getText(), txtIdUsuario.getText());
        
        for(ObjetosSuscripcion s : listado){
            txtIdSuscripcion.setText(String.valueOf(s.getId_suscripcion()));
            txtContador.setText(s.getContador_suscripcion());
        }
        
        AccesoCobro acceso_cobro = new AccesoCobro();
        txtPendiente.setText(String.valueOf(acceso_cobro.buscarSaldo(txtIdSuscripcion.getText())));
        
        ObjetosCobro cobro = new ObjetosCobro();
        cobro = acceso_cobro.buscarCobrosCliente(txtIdSuscripcion.getText(), txtMes.getText(), txtAnio.getText());
        System.out.println("Pantalla Valor Cobro: " +  cobro.getValor_cobro());
        txtCargoMes.setText(String.valueOf(cobro.getValor_cobro()));
        System.out.println("Pantalla Acumulador Cobro: " +  cobro.getAcumulado_cobro());
        txtSaldoMes.setText(String.valueOf(cobro.getAcumulado_cobro()));
        System.out.println("Pantalla Total Cobro: " +  cobro.getTotal_cobro());
        txtTotalServicio.setText(String.valueOf(cobro.getTotal_cobro()));
        System.out.println("Pantalla Excedente Cobro: " +  cobro.getValor_excedente());
        txtExcedente.setText(String.valueOf(cobro.getValor_excedente()));
        
    }//GEN-LAST:event_usuarioLostFocus

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        
        String sql = null;
        
        //permitir que se imprima la factura despues de haber guardado
        txtImprimeFactura.setText("S");

        //revisar que todos los campos esten llenos para realizar el pago
        if (txtMes.getText().isEmpty() || txtAnio.getText().isEmpty() || txtMonto.getText().isEmpty()) {
            mensaje.manipulacionExcepciones("critico", "Deben de estar todos los campos llenos");
        } else {
            //si los campos estan llenos verifico que ingrese numero factura
            if (txtNoFactura.getText().isEmpty()) {
                mensaje.manipulacionExcepciones("critico", "Por favor ingrese el numero de factura");
            } else {
                //si monto es igual a cero cancelo el total de la factura
                Double monto = Double.parseDouble(txtMonto.getText());
                AccesoCobro acceso = new AccesoCobro();
                if (monto <= 0.0) {
                    System.out.println("Cancelar todos los cobros pendientes");
                    mensaje.manipulacionExcepciones("informacion", acceso.cancelarTodosLosCobros(txtIdSuscripcion.getText(), txtNoFactura.getText()));
                    if(txtAplicaDescuento.getText().equals("S")){
                        //si se aplico descuento por aniversario ingresar el ajuste
                        String usuario = Inventory.txtUsuario.getText();
                        acceso.ajustarCobroPorSuscripcionMesAnio(txtIdSuscripcion.getText(), txtMes.getText(), txtAnio.getText(), txtDescuento.getText(), "DESCUENTO POR ANIVERSARIO", usuario);
                    }
                } else {
                    //colocar todo como cancelado indicando que el resto ya los pago
                    acceso.cancelarTodosLosCobros(txtIdSuscripcion.getText(), txtNoFactura.getText());
                    //colocar el ultimo como anulado para que no se tome en cuenta
                    acceso.anularCobroPorSuscripcionMesAnio(txtIdSuscripcion.getText(), txtMes.getText(), txtAnio.getText());
                    //insertar un nuevo registro con estado generado con el monto pendiente de pago
                    ObjetosCobro cobro = new ObjetosCobro();
                    cobro.setId_cobro(Integer.parseInt(txtIdSuscripcion.getText()));
                    cobro.setId_suscripcion(Integer.parseInt(txtIdSuscripcion.getText()));
                    cobro.setAnio_cobro(Integer.parseInt(txtAnio.getText()));
                    cobro.setMes_cobro(Integer.parseInt(txtMes.getText()));
                    cobro.setFecha_puntual_cobro(txtAnio.getText() + "/" + txtMes.getText() + "/1");
                    cobro.setFecha_maxima_cobro(txtAnio.getText() + "/" + txtMes.getText() + "/1");
                    cobro.setDias_atrazo_cobro(0);
                    cobro.setNumero_contador_cobro(txtContador.getText());
                    cobro.setValor_cobro(monto);
                    cobro.setValor_excedente(0.0);
                    cobro.setValor_penalizacion_cobro(0.0);
                    cobro.setAcumulado_cobro(0.0);
                    cobro.setTotal_cobro(monto);
                    cobro.setForma_pago_cobro("Pendiente");
                    cobro.setEstado_cobro("G");
                    cobro.setFactura_cobro(0);
                    acceso.actualizarCobro(cobro, Inventory.txtUsuario.getText());
                    acceso.insertarCobro(cobro, Inventory.txtUsuario.getText());
                    mensaje.manipulacionExcepciones("informacion", "Se agrego un abono con exito");
                }

                //almacenar el cobro en la base de datos

                AccesoAbono acceso_abono = new AccesoAbono();
                ObjetosAbono abono = new ObjetosAbono();

                try {
                    abono.setId_abono(0);
                    abono.setId_cobro(Integer.parseInt(txtIdSuscripcion.getText()));
                    abono.setMes_abono(Integer.parseInt(txtMes.getText()));
                    abono.setAnio_abono(Integer.parseInt(txtAnio.getText()));
                    abono.setPago_abono(Double.parseDouble(txtAbono.getText()));
                    abono.setSaldo_abono(Double.parseDouble(txtMonto.getText()));
                    abono.setFactura(txtNoFactura.getText());
                    acceso_abono.insertarAbono(abono, Inventory.txtUsuario.getText());
                    System.out.println("Se guardo el abono con exito");
                } catch (Exception e) {
                    mensaje.manipulacionExcepciones("critico", e.toString());
                }
            }
        }
       
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void cobroLostFocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cobroLostFocus
        
        //obtener el mes actual del aÃ±o
        Calendar now = Calendar.getInstance();
        int mes = now.get(Calendar.MONTH) + 1;
        
        ServicioOperacionesMatematicas operacion = new ServicioOperacionesMatematicas();
        Double abono = Double.parseDouble(txtAbono.getText());
        Double pendiente = Double.parseDouble(txtPendiente.getText());
        Double monto = operacion.redondear((pendiente - abono), 2);
        Double descuento = operacion.redondear(pendiente * 0.05 , 2);
        
        if (abono <= pendiente) {

            System.out.println("Abono: " + abono);
            System.out.println("Pendiente: " + pendiente);
            
            if (monto == 0 && mes == 12) {
                
                lblMes.setText("Aplicar descuento");
                
                txtDescuento.setText(String.valueOf(descuento));
                txtAbono.setText(String.valueOf(operacion.redondear(abono - descuento, 2)));
                txtMonto.setText(String.valueOf(monto));
                txtPendiente.setText(String.valueOf(operacion.redondear(pendiente - descuento,2)));
                txtAplicaDescuento.setText("S");
            
            } else {
                
                lblMes.setText("Pago normal");
                
                txtAplicaDescuento.setText("N");
                txtDescuento.setText("0.0");
                txtMonto.setText(String.valueOf(monto));
            }
            
        } else {
            mensaje.manipulacionExcepciones("critico", "Este monto sobrepasa la deuda");
            txtDescuento.setText("0.0");
            txtAbono.requestFocus();
        }
        
    }//GEN-LAST:event_cobroLostFocus

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        if (txtImprimeFactura.getText().equals("S")) {
            txtImprimeFactura.setText("");
            txtContador.setText("");
            txtIdServicio.setText("");
            txtDescripcionServicio.setText("");
            txtIdUsuario.setText("");
            txtNombreUsuario.setText("");
            txtIdSuscripcion.setText("");
            txtNitCliente.setText("");
            txtColonia.setText("");
            txtExcedente.setText("");
            txtCargoMes.setText("");
            txtSaldoMes.setText("");
            txtTotalServicio.setText("");
            txtAbono.setText("");
            txtPendiente.setText("");
            txtMonto.setText("");
            txtNoFactura.setText("");
            txtNota.setText("");
        } else {
            mensaje.manipulacionExcepciones("informacion", "No ha guardado la factura");
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        try {
            mensaje.manipulacionExcepciones("critio", ""+txtNoFactura.getText().length());
            if (txtNoFactura.getText().length() == 0) {
                mensaje.manipulacionExcepciones("critico", "Ingrese el numero de la factura");
            } else {
                Date fecha = new Date();
                String hoy = fecha.getDate() + "/" +  (fecha.getMonth()+1) + "/" +  (1900 + fecha.getYear());
                Conexion Acceso = new Conexion();
                URL url_reporte = this.getClass().getResource("/inventory/reportes/rptFacturaSinIva.jasper");
                JasperReport reporte = (JasperReport) JRLoader.loadObject(url_reporte);
                HashMap parametro = new HashMap();
                
                //validar el comentario, en el caso de cancelar colocar el mes cancelado
                //si no cancela colocar el saldo pendiente por pagar
                String observaciones = "";
                String nombre_mes  = "";
                
                //validar el nombre del mes ingresado
                if ( "1".equals(txtMes.getText())) { nombre_mes = "ENERO"; }
                if ( "2".equals(txtMes.getText())) { nombre_mes = "FEBRERO"; }
                if ( "3".equals(txtMes.getText())) { nombre_mes = "MARZO"; }
                if ( "4".equals(txtMes.getText())) { nombre_mes = "ABRIL"; }
                if ( "5".equals(txtMes.getText())) { nombre_mes = "MAYO"; }
                if ( "6".equals(txtMes.getText())) { nombre_mes = "JUNIO"; }
                if ( "7".equals(txtMes.getText())) { nombre_mes = "JULIO"; }
                if ( "8".equals(txtMes.getText())) { nombre_mes = "AGOSTO"; }
                if ( "9".equals(txtMes.getText())) { nombre_mes = "SEPTIEMBRE"; }
                if ( "10".equals(txtMes.getText())) { nombre_mes = "OCTUBRE"; }
                if ( "11".equals(txtMes.getText())) { nombre_mes = "NOVIEMBRE"; }
                if ( "12".equals(txtMes.getText())) { nombre_mes = "DICIEMBRE"; }
                
                if(Double.parseDouble(txtMonto.getText()) == 0.00) {
                    observaciones = "MES CANCELADO " + nombre_mes + " " + txtAnio.getText();
                } else {
                   observaciones = "SALDO PENDIENTE " + txtMonto.getText();
                }
                
                parametro.put("P_MES", Integer.parseInt(txtMes.getText()));
                parametro.put("P_ANIO", Integer.parseInt(txtAnio.getText()));
                parametro.put("P_ID_CLIENTE", Integer.parseInt(txtIdSuscripcion.getText()));
                parametro.put("P_SERVICIO", Integer.parseInt(txtIdServicio.getText()));
                parametro.put("P_CARGO_MES", txtCargoMes.getText());
                parametro.put("P_SALDO", txtSaldoMes.getText());
                parametro.put("P_TOTAL_SERVICIO", txtPendiente.getText());
                parametro.put("P_TOTAL_PAGO", String.valueOf(Double.parseDouble(txtAbono.getText())));
                parametro.put("P_EXCEDENTE", txtExcedente.getText());
                parametro.put("P_FACTURACION", hoy);
                parametro.put("P_OBSERVACIONES", observaciones);
                
                JasperPrint pantalla = JasperFillManager.fillReport(reporte, parametro, Acceso.conectar());
                JasperViewer visualizador = new JasperViewer(pantalla, false);
                visualizador.setTitle("Factura");
                visualizador.show();
            }
        } catch (JRException error) {
            System.out.println("Error al generar reporte: " + error);
            mensaje.manipulacionExcepciones("critico", "Ocurrio un error al ejecutar el reporte -> " + error);
        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnAjusteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAjusteActionPerformed
        String sql = null;
        if(txtMes.getText().isEmpty() || txtAnio.getText().isEmpty() || txtMonto.getText().isEmpty() || txtNota.getText().isEmpty()){
            mensaje.manipulacionExcepciones("critico", "Deben de estar todos los campos llenos");
        } else {
            //si el monto es igual a cero, quiere decir que no quedo nada
            //pendiente colocar todo como cancelado
            Double monto = Double.parseDouble(txtMonto.getText());
            AccesoCobro acceso = new AccesoCobro();
            if(monto <= 0.0){
                System.out.println("Cancelar todos los cobros");
                acceso.cancelarTodosLosCobros(txtIdSuscripcion.getText(), txtNoFactura.getText());
                mensaje.manipulacionExcepciones("informacion", "Cobro cancelado totalmente");
            } else {
                //colocar todo como cancelado indicando que el resto ya los pago
                acceso.cancelarTodosLosCobros(txtIdSuscripcion.getText(), txtNoFactura.getText());
                //colocar el ultimo como anulado para que no se tome en cuenta
                String usuario = Inventory.txtUsuario.getText();
                acceso.ajustarCobroPorSuscripcionMesAnio(txtIdSuscripcion.getText(), txtMes.getText(), txtAnio.getText(), txtAbono.getText(), txtNota.getText(), usuario);
                //insertar un nuevo registro con estado generado con el monto pendiente de pago
                ObjetosCobro cobro = new ObjetosCobro();
                cobro.setId_cobro(Integer.parseInt(txtIdSuscripcion.getText()));
                cobro.setId_suscripcion(Integer.parseInt(txtIdSuscripcion.getText()));
                cobro.setAnio_cobro(Integer.parseInt(txtAnio.getText()));
                cobro.setMes_cobro(Integer.parseInt(txtMes.getText()));
                cobro.setFecha_puntual_cobro(txtAnio.getText()+"/"+txtMes.getText()+"/1");
                cobro.setFecha_maxima_cobro(txtAnio.getText()+"/"+txtMes.getText()+"/1");
                cobro.setDias_atrazo_cobro(0);
                cobro.setNumero_contador_cobro(txtContador.getText());
                cobro.setValor_cobro(monto);
                cobro.setValor_excedente(0.0);
                cobro.setValor_penalizacion_cobro(0.0);
                cobro.setAcumulado_cobro(0.0);
                cobro.setTotal_cobro(monto);
                cobro.setForma_pago_cobro("Pendiente");
                cobro.setEstado_cobro("G");
                cobro.setFactura_cobro(0);
                acceso.actualizarCobro(cobro, Inventory.txtUsuario.getText());
                acceso.insertarCobro(cobro, Inventory.txtUsuario.getText());
                mensaje.manipulacionExcepciones("informacion", "Se agrego un ajuste con exito");
            }
        }
    }//GEN-LAST:event_btnAjusteActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
       try {
            mensaje.manipulacionExcepciones("critio", ""+txtNoFactura.getText().length());
            if (txtNoFactura.getText().length() == 0) {
                mensaje.manipulacionExcepciones("critico", "Ingrese el numero de la factura");
            } else {
                Date fecha = new Date();
                String hoy = fecha.getDate() + "/" +  (fecha.getMonth()+1) + "/" +  (1900 + fecha.getYear());
                Conexion Acceso = new Conexion();
                URL url_reporte = this.getClass().getResource("/inventory/reportes/rptFacturaSinIva.jasper");
                JasperReport reporte = (JasperReport) JRLoader.loadObject(url_reporte);
                HashMap parametro = new HashMap();
                
                //validar el comentario, en el caso de cancelar colocar el mes cancelado
                //si no cancela colocar el saldo pendiente por pagar
                String observaciones = "";
                String nombre_mes  = "";
                
                //validar el nombre del mes ingresado
                if ( "1".equals(txtMes.getText())) { nombre_mes = "ENERO"; }
                if ( "2".equals(txtMes.getText())) { nombre_mes = "FEBRERO"; }
                if ( "3".equals(txtMes.getText())) { nombre_mes = "MARZO"; }
                if ( "4".equals(txtMes.getText())) { nombre_mes = "ABRIL"; }
                if ( "5".equals(txtMes.getText())) { nombre_mes = "MAYO"; }
                if ( "6".equals(txtMes.getText())) { nombre_mes = "JUNIO"; }
                if ( "7".equals(txtMes.getText())) { nombre_mes = "JULIO"; }
                if ( "8".equals(txtMes.getText())) { nombre_mes = "AGOSTO"; }
                if ( "9".equals(txtMes.getText())) { nombre_mes = "SEPTIEMBRE"; }
                if ( "10".equals(txtMes.getText())) { nombre_mes = "OCTUBRE"; }
                if ( "11".equals(txtMes.getText())) { nombre_mes = "NOVIEMBRE"; }
                if ( "12".equals(txtMes.getText())) { nombre_mes = "DICIEMBRE"; }
                
                if(Double.parseDouble(txtMonto.getText()) == 0.00) {
                    observaciones = "MES CANCELADO " + nombre_mes + " " + txtAnio.getText();
                } else {
                   observaciones = "SALDO PENDIENTE " + txtMonto.getText();
                }
                
                parametro.put("P_MES", Integer.parseInt(txtMes.getText()));
                parametro.put("P_ANIO", Integer.parseInt(txtAnio.getText()));
                parametro.put("P_ID_CLIENTE", Integer.parseInt(txtIdSuscripcion.getText()));
                parametro.put("P_SERVICIO", Integer.parseInt(txtIdServicio.getText()));
                parametro.put("P_CARGO_MES", txtCargoMes.getText());
                parametro.put("P_SALDO", txtSaldoMes.getText());
                parametro.put("P_TOTAL_SERVICIO", txtPendiente.getText());
                parametro.put("P_TOTAL_PAGO", String.valueOf(Double.parseDouble(txtAbono.getText())));
                parametro.put("P_EXCEDENTE", txtExcedente.getText());
                parametro.put("P_FACTURACION", hoy);
                parametro.put("P_OBSERVACIONES", observaciones);
                
                //generar achivo DOCX
                String url_archivo = "C:\\MSIG Payments\\Factura.docx";
                JasperPrint pantalla = JasperFillManager.fillReport(reporte, parametro, Acceso.conectar());
                JRDocxExporter exportar = new JRDocxExporter();
                exportar.setParameter(JRExporterParameter.JASPER_PRINT, pantalla);
                exportar.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, url_archivo);
                exportar.exportReport();
                
                //abrir archivo DOCX
                try {
                    Runtime.getRuntime().exec("C:\\MSIG Payments\\exec.bat");
                } catch(Exception e) {
                    System.out.println("Error al abrir reporte: " + e);
                    mensaje.manipulacionExcepciones("critico", "Ocurrio un error al abrir el reporte -> " + e);
                }
                
            }
        } catch (JRException error) {
            System.out.println("Error al generar reporte: " + error);
            mensaje.manipulacionExcepciones("critico", "Ocurrio un error al ejecutar el reporte -> " + error);
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnAjuste;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JLabel lblMes;
    private javax.swing.JTextField txtAbono;
    private javax.swing.JTextField txtAnio;
    private javax.swing.JTextField txtAplicaDescuento;
    private javax.swing.JTextField txtCargoMes;
    private javax.swing.JTextField txtColonia;
    private javax.swing.JTextField txtContador;
    private javax.swing.JTextField txtDescripcionServicio;
    private javax.swing.JTextField txtDescuento;
    private javax.swing.JTextField txtExcedente;
    private javax.swing.JTextField txtIdServicio;
    private javax.swing.JTextField txtIdSuscripcion;
    private javax.swing.JTextField txtIdUsuario;
    private javax.swing.JTextField txtImprimeFactura;
    private javax.swing.JTextField txtMes;
    private javax.swing.JTextField txtMonto;
    private javax.swing.JTextField txtNitCliente;
    private javax.swing.JTextField txtNoFactura;
    private javax.swing.JTextField txtNombreUsuario;
    private javax.swing.JTextField txtNota;
    private javax.swing.JTextField txtPendiente;
    private javax.swing.JTextField txtSaldoMes;
    private javax.swing.JTextField txtTotalServicio;
    // End of variables declaration//GEN-END:variables
}
